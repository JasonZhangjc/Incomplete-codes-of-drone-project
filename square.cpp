#include <opencv/cv.h>
#include <opencv2/core/core.hpp>
#include <ros/ros.h>
#include <std_msgs/Float64.h>
#include <stdio.h>
#include <dji_sdk/dji_drone.h>
#include <cstdlib>
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>
#include <sys/time.h>
#include <dji_sdk/LocalPosition.h>
#include <sensor_msgs/LaserScan.h>
#include <dji_sdk/LocalPosition.h>
#include <dji_sdk/AttitudeQuaternion.h>
#include <dji_sdk/Acceleration.h>
#include <dji_sdk/Velocity.h>
#include <network_client/Optitrack_data.h>                   
#include <ctime>
#include <fstream>
#include <geometry_msgs/Vector3Stamped.h>
#define PI 3.1416       
float vx=0,vy=0,vh=0;   // Initialize three velocity inputs


using namespace DJI::onboardSDK;
using namespace std;

ros::Subscriber guidance_height;         
ros::Subscriber guidance_velocity;    

ros::Subscriber Opti_pos;         

ros::Subscriber l_position;                
ros::Subscriber quaternion_subscriber;     
ros::Subscriber acceleration_sub;          
ros::Subscriber velocity_sub;  // subscribed velocity            

dji_sdk::AttitudeQuaternion attitude_quaternion;            
dji_sdk::Acceleration acc;                          
dji_sdk::Velocity velocity;                         
network_client::Optitrack_data pos;    
geometry_msgs::Vector3Stamped v_guidance;


CvMat *q_right_now=cvCreateMat(4,1,CV_32FC1);       
CvMat *att_right_now=cvCreateMat(3,1,CV_32FC1);    

double tic()
{
	struct timeval t;

	gettimeofday(&t,NULL);
	return ((double)t.tv_sec + ((double)t.tv_usec)/1000000.);    
}

void position_callback(network_client::Optitrack_data position)
{
	pos = position;               
}                                   


void acceleration_callback(dji_sdk::Acceleration accs)
{
	acc = accs;                // the acceleration detected by dji
}

void velocity_callback(dji_sdk::Velocity velocity_)
{
	velocity = velocity_;     // the velocity detected by dji
}

void Quaternion_To_Euler(CvMat *q_att, CvMat *att)     
{
		double r11,r12,r21,r31,r32,r1,r2,r3;
		double q[4] = { cvmGet(q_att,0,0),  cvmGet(q_att,1,0), 
		                cvmGet(q_att,2,0), cvmGet(q_att,3,0)};
    	r11 = 2.0f *(q[1] * q[2] + q[0] * q[3]);
    	r12 = q[0] * q[0] + q[1] * q[1] - q[2] * q[2]  - q[3] * q[3] ;
    	r21 = -2.0f * (q[1] * q[3] - q[0] * q[2]);
    	r31 = 2.0f *( q[2] * q[3] + q[0]  * q[1]);
    	r32 = q[0] * q[0] - q[1] * q[1]  - q[2] * q[2] + q[3] * q[3] ;
    	double yaw= atan2( r11, r12 );
    	double pitch = asin( r21 );
    	double roll = atan2( r31, r32 );
    	cvmSet(att, 0, 0, roll);
    	cvmSet(att, 1, 0, pitch);
    	cvmSet(att, 2, 0, yaw);          // stored in cvmSet
}

void attitude_quaternion_subscriber_callback(const dji_sdk::AttitudeQuaternion& quaternion)
{
	attitude_quaternion = quaternion;
	cvmSet(q_right_now, 0, 0, attitude_quaternion.q0);
	cvmSet(q_right_now, 1, 0, attitude_quaternion.q1);
	cvmSet(q_right_now, 2, 0, attitude_quaternion.q2);
	cvmSet(q_right_now, 3, 0, attitude_quaternion.q3);
	Quaternion_To_Euler(q_right_now,att_right_now);     
	// change quaternion back to Euler angle
}

void g_velocity_callback(const geometry_msgs::Vector3Stamped& velocityg)
{
	v_guidance = velocityg;     // velocity detected by guidance
}

int main(int argc, char **argv)     
{
    int timer=0;
	int counter=0;
    ros::init(argc, argv, "attitude_control_test");
    ROS_INFO("square test");
	ofstream init_log("/home/hitcsc/catkin_ws/log/test_client/ascend.txt");   
	// store data in ascend.txt
	
	if(init_log.is_open())
	{
		cout << "Log initation success"<< endl;      
	}
	else
	{
		cout << "Log error"<< endl;
	}

    ros::NodeHandle nh;

    DJIDrone* drone = new DJIDrone(nh);
	
	Opti_pos = nh.subscribe("/network_client/network_optitrack_data", 
	                        10, position_callback);
	
	guidance_velocity = 
	nh.subscribe("/guidance/velocity", 10, g_velocity_callback);     
	// The velocity detected by guidance
	
	quaternion_subscriber = 
	nh.subscribe("dji_sdk/attitude_quaternion", 
	10, attitude_quaternion_subscriber_callback);   
	
	acceleration_sub = 
	nh.subscribe("dji_sdk/acceleration",
	10, acceleration_callback);    // The acceleration of dji
	
	velocity_sub = 
	nh.subscribe("dji_sdk/velocity", 10, velocity_callback);   	
	// dji_sdk::Velocity velocity; 
	
	while(drone->activation==0)    // if not activated
	{
		ros::spinOnce();
        sleep(1);
		drone->activate();
		ROS_INFO("active error %d",drone->activation);
	}
	ROS_INFO("active success ok !!");   // drone->activation!=0

	while((abs(drone->rc_channels.mode+8000.0)<1)||abs(drone->rc_channels.mode)<1)    
	{
		ros::spinOnce();
		drone->request_sdk_permission_control();
		ROS_INFO("obtain  error !!! %f",drone->rc_channels.mode);
		sleep(1);
	}
	ROS_INFO("obtain control success!!!");   
	//drone->takeoff();
	//sleep(8);     //take off codes.
	ROS_INFO("takeoff command send ok!!!");
	
	float yaw=0.;     
	float vz=0;
	
	float ux=0;    
	float uy=0;
	float uz=0;
	float px=0;
	float py=0;
	float pz=0;
	float d_x=0;
	float d_y=0;
	float d_z=0;
	float wx=0;
	float wy=0;
	float wz=0;       
	
	int coun=0;
	float deg=0;
	
	float a[2000];
	float b[2000];
	int i=0;
			
	int wny_count=0;
	double wny_counter=0.0;
	float wny_vx=0.0;
	float wny_vy=0.0;
	

	float a1[360]={-1.80049600000000,-1.80137770000000,-1.80210730000000,-1.80267750000000,-1.80308710000000,-1.80334310000000,-1.80344600000000,-1.80339280000000,-1.80319350000000,-1.80287720000000,-1.80248280000000,-1.80208480000000,-1.80171860000000,-1.80141250000000,-1.80118330000000,-1.80103110000000,-1.80092160000000,-1.80084110000000,-1.80077580000000,-1.80070960000000,-1.80061890000000,-1.80048210000000,-1.80029500000000,-1.80005770000000,-1.79977750000000,-1.79946530000000,-1.79913020000000,-1.79877860000000,-1.79840860000000,-1.79803050000000,-1.79767210000000,-1.79738260000000,-1.79719340000000,-1.79713990000000,-1.79725150000000,-1.79753180000000,-1.79795610000000,-1.79850140000000,-1.79915130000000,-1.79987340000000,-1.80061660000000,-1.80132220000000,-1.80197230000000,-1.80258030000000,-1.80316820000000,-1.80376130000000,-1.80438630000000,-1.80504800000000,-1.80573340000000,-1.80639550000000,-1.80699390000000,-1.80745070000000,-1.80773490000000,-1.80784880000000,-1.80777790000000,-1.80751730000000,-1.80706650000000,-1.80642410000000,-1.80560240000000,-1.80461500000000,-1.80349010000000,-1.80226690000000,-1.80095640000000,-1.79955160000000,-1.79804100000000,-1.79641020000000,-1.79463450000000,-1.79271820000000,-1.79067620000000,-1.78854240000000,-1.78634530000000,-1.78410120000000,-1.78181500000000,-1.77949690000000,-1.77715350000000,-1.77478840000000,-1.77239860000000,-1.76998470000000,-1.76757470000000,-1.76517440000000,-1.76277590000000,-1.76037140000000,-1.75795450000000,-1.75552160000000,-1.75308380000000,-1.75065110000000,-1.74822020000000,-1.74578320000000,-1.74332950000000,-1.74085690000000,-1.73836870000000,-1.73586590000000,-1.73335250000000,-1.73084070000000,-1.72834230000000,-1.72587290000000,-1.72345780000000,-1.72110370000000,-1.71878570000000,-1.71649420000000,-1.71421610000000,-1.71194950000000,-1.70971740000000,-1.70752510000000,-1.70533490000000,-1.70310750000000,-1.70082830000000,-1.69849740000000,-1.69612790000000,-1.69373850000000,-1.69134680000000,-1.68895790000000,-1.68655980000000,-1.68412760000000,-1.68164320000000,-1.67907880000000,-1.67641470000000,-1.67364580000000,-1.67078060000000,-1.66785450000000,-1.66492200000000,-1.66205740000000,-1.65927900000000,-1.65658030000000,-1.65392700000000,-1.65129120000000,-1.64864550000000,-1.64599000000000,-1.64334150000000,-1.64072010000000,-1.63814650000000,-1.63565090000000,-1.63323450000000,-1.63088430000000,-1.62861030000000,-1.62643160000000,-1.62435650000000,-1.62239830000000,-1.62057280000000,-1.61887790000000,-1.61730430000000,-1.61582900000000,-1.61445330000000,-1.61318560000000,-1.61201630000000,-1.61091640000000,-1.60981700000000,-1.60869780000000,-1.60755430000000,-1.60638590000000,-1.60518980000000,-1.60394980000000,-1.60266120000000,-1.60131280000000,-1.59988980000000,-1.59839490000000,-1.59687370000000,-1.59534680000000,-1.59381470000000,-1.59226890000000,-1.59071340000000,-1.58916720000000,-1.58764620000000,-1.58616500000000,-1.58472360000000,-1.58330100000000,-1.58188620000000,-1.58047430000000,-1.57905380000000,-1.57761180000000,-1.57613640000000,-1.57461180000000,-1.57302890000000,-1.57138030000000,-1.56966330000000,-1.56788430000000,-1.56605390000000,-1.56417620000000,-1.56225450000000,-1.56028750000000,-1.55826360000000,-1.55617610000000,-1.55401240000000,-1.55175890000000,-1.54939840000000,-1.54692820000000,-1.54435240000000,-1.54167330000000,-1.53890770000000,-1.53607850000000,-1.53320670000000,-1.53029950000000,-1.52735270000000,-1.52436230000000,-1.52130960000000,-1.51819860000000,-1.51503720000000,-1.51182690000000,-1.50856090000000,-1.50521830000000,-1.50179380000000,-1.49828870000000,-1.49469530000000,-1.49101030000000,-1.48724650000000,-1.48340600000000,-1.47948530000000,-1.47546960000000,-1.47134670000000,-1.46709850000000,-1.46273180000000,-1.45826320000000,-1.45369530000000,-1.44902830000000,-1.44426280000000,-1.43939200000000,-1.43439130000000,-1.42925760000000,-1.42399460000000,-1.41858870000000,-1.41303650000000,-1.40733900000000,-1.40149850000000,-1.39552900000000,-1.38944520000000,-1.38327000000000,-1.37702510000000,-1.37070680000000,-1.36430880000000,-1.35781780000000,-1.35121770000000,-1.34449600000000,-1.33764180000000,-1.33064070000000,-1.32347190000000,-1.31613510000000,-1.30865120000000,-1.30104160000000,-1.29333230000000,-1.28556320000000,-1.27778720000000,-1.27003950000000,-1.26232540000000,-1.25464060000000,-1.24697400000000,-1.23931090000000,-1.23164710000000,-1.22398920000000,-1.21635140000000,-1.20874140000000,-1.20115950000000,-1.19362230000000,-1.18614780000000,-1.17876350000000,-1.17147020000000,-1.16427060000000,-1.15717410000000,-1.15018740000000,-1.14332560000000,-1.13661270000000,-1.13008390000000,-1.12375660000000,-1.11761650000000,-1.11162780000000,-1.10574870000000,-1.09994767000000,-1.09420374000000,-1.08850182000000,-1.08283239000000,-1.07719449000000,-1.07157681000000,-1.06593712000000,-1.06025662000000,-1.05452567000000,-1.04873238000000,-1.04286170000000,-1.03692094000000,-1.03092620000000,-1.02490431000000,-1.01888939000000,-1.01292156000000,-1.00705301000000,-1.00131214000000,-0.995727200000000,-0.990310780000000,-0.985060380000000,-0.979938750000000,-0.974934150000000,-0.970024270000000,-0.965163050000000,-0.960345120000000,-0.955589660000000,-0.950883260000000,-0.946194740000000,-0.941499390000000,-0.936781530000000,-0.932035790000000,-0.927263120000000,-0.922458120000000,-0.917607060000000,-0.912684630000000,-0.907669280000000,-0.902557350000000,-0.897351570000000,-0.892076230000000,-0.886777680000000,-0.881501660000000,-0.876277150000000,-0.871141010000000,-0.866123740000000,-0.861250270000000,-0.856542580000000,-0.852000440000000,-0.847613250000000,-0.843370380000000,-0.839241700000000,-0.835188340000000,-0.831192260000000,-0.827232550000000,-0.823298190000000,-0.819367680000000,-0.815413900000000,-0.811425340000000,-0.807395240000000,-0.803316360000000,-0.799186280000000,-0.795010280000000,-0.790793540000000,-0.786554430000000,-0.782305760000000,-0.778049030000000,-0.773773920000000,-0.769473980000000,-0.765155270000000,-0.760841190000000,-0.756552390000000,-0.752296390000000,-0.748077610000000,-0.743888170000000,-0.739720300000000,-0.735562100000000,-0.731396380000000,-0.727204560000000,-0.722963690000000,-0.718657880000000,-0.714278160000000,-0.709809020000000,-0.705239580000000,-0.700559860000000,-0.695756350000000,-0.690820180000000,-0.685757140000000,-0.680577140000000,-0.675292370000000,-0.669915040000000,-0.664483060000000,-0.659041310000000,-0.653631710000000,-0.648291340000000,-0.643057100000000};
	float a2[360]={-0.000941888000000000,-0.00274676650000000,-0.00444549200000000,-0.00604054520000000,-0.00753400110000000,-0.00892530830000000,-0.0102154320000000,-0.0114036250000000,-0.0124861780000000,-0.0134543620000000,-0.0142891090000000,-0.0149527270000000,-0.0154339390000000,-0.0157283710000000,-0.0158313860000000,-0.0157377780000000,-0.0154478440000000,-0.0149567630000000,-0.0142618270000000,-0.0133770560000000,-0.0123291700000000,-0.0111537870000000,-0.00987693740000000,-0.00853321410000000,-0.00716504250000000,-0.00581310680000000,-0.00452349300000000,-0.00331814330000000,-0.00221865910000000,-0.00123555120000000,-0.000369645950000000,0.000381114000000000,0.00102572490000000,0.00158490280000000,0.00208333580000000,0.00254667690000000,0.00301557470000000,0.00350528190000000,0.00402880700000000,0.00457184780000000,0.00511487830000000,0.00565911270000000,0.00620981470000000,0.00678251190000000,0.00737817800000000,0.00799232580000000,0.00864953380000000,0.00938877160000000,0.0102506570000000,0.0112566140000000,0.0124118740000000,0.0137292650000000,0.0152214970000000,0.0168954860000000,0.0187554990000000,0.0208037500000000,0.0230330790000000,0.0254366230000000,0.0280056960000000,0.0307386700000000,0.0336481270000000,0.0367492840000000,0.0400393900000000,0.0435026080000000,0.0471214010000000,0.0508574950000000,0.0546611330000000,0.0585112140000000,0.0623924250000000,0.0662932180000000,0.0702325340000000,0.0742468440000000,0.0783481810000000,0.0825315110000000,0.0867897400000000,0.0911271750000000,0.0955391670000000,0.100016820000000,0.104564470000000,0.109207180000000,0.113968610000000,0.118868800000000,0.123923810000000,0.129154480000000,0.134555860000000,0.140084790000000,0.145669790000000,0.151273800000000,0.156853770000000,0.162384240000000,0.167859130000000,0.173283390000000,0.178661390000000,0.184004750000000,0.189330700000000,0.194672860000000,0.200099090000000,0.205654650000000,0.211386100000000,0.217335360000000,0.223534380000000,0.229974790000000,0.236628150000000,0.243448410000000,0.250387180000000,0.257394410000000,0.264416600000000,0.271435810000000,0.278439010000000,0.285420980000000,0.292379490000000,0.299312640000000,0.306220650000000,0.313098740000000,0.319933290000000,0.326710730000000,0.333412360000000,0.340028310000000,0.346548200000000,0.352966930000000,0.359281530000000,0.365496370000000,0.371621870000000,0.377677100000000,0.383682780000000,0.389643940000000,0.395541500000000,0.401361920000000,0.407089210000000,0.412709270000000,0.418209660000000,0.423589990000000,0.428859270000000,0.434025380000000,0.439098700000000,0.444090840000000,0.449008360000000,0.453857140000000,0.458642000000000,0.463360070000000,0.467998290000000,0.472548290000000,0.477016870000000,0.481408770000000,0.485702340000000,0.489868790000000,0.493866880000000,0.497678710000000,0.501290020000000,0.504696030000000,0.507890760000000,0.510856560000000,0.513579550000000,0.516036500000000,0.518208830000000,0.520090340000000,0.521701260000000,0.523066490000000,0.524213340000000,0.525163030000000,0.525932680000000,0.526544290000000,0.527011810000000,0.527354060000000,0.527585050000000,0.527713180000000,0.527744630000000,0.527687710000000,0.527551840000000,0.527345390000000,0.527073790000000,0.526741320000000,0.526351390000000,0.525907230000000,0.525411990000000,0.524863180000000,0.524250490000000,0.523565150000000,0.522797920000000,0.521930920000000,0.520939150000000,0.519825600000000,0.518610300000000,0.517331190000000,0.516023400000000,0.514732540000000,0.513490680000000,0.512304930000000,0.511169820000000,0.510064370000000,0.508961890000000,0.507840930000000,0.506698510000000,0.505525900000000,0.504330440000000,0.503121990000000,0.501907390000000,0.500682260000000,0.499433810000000,0.498154440000000,0.496852170000000,0.495536900000000,0.494218110000000,0.492908890000000,0.491619200000000,0.490380490000000,0.489228300000000,0.488209190000000,0.487382660000000,0.486794710000000,0.486477560000000,0.486420890000000,0.486607390000000,0.486989930000000,0.487517360000000,0.488147540000000,0.488833920000000,0.489558340000000,0.490283780000000,0.490972470000000,0.491601200000000,0.492144580000000,0.492590130000000,0.492922450000000,0.493132990000000,0.493211610000000,0.493160900000000,0.492979420000000,0.492667100000000,0.492212450000000,0.491623570000000,0.490922600000000,0.490121460000000,0.489238700000000,0.488277800000000,0.487228060000000,0.486066650000000,0.484782740000000,0.483346980000000,0.481732210000000,0.479922770000000,0.477907900000000,0.475684710000000,0.473254220000000,0.470621230000000,0.467810850000000,0.464872820000000,0.461836330000000,0.458724320000000,0.455534680000000,0.452260710000000,0.448901040000000,0.445447170000000,0.441883210000000,0.438205740000000,0.434401460000000,0.430444740000000,0.426318200000000,0.421997020000000,0.417458660000000,0.412713950000000,0.407809530000000,0.402790120000000,0.397718080000000,0.392657950000000,0.387674420000000,0.382820430000000,0.378120600000000,0.373614970000000,0.369326120000000,0.365258290000000,0.361432020000000,0.357854820000000,0.354528740000000,0.351461480000000,0.348657210000000,0.346127780000000,0.343870840000000,0.341866760000000,0.340100120000000,0.338567960000000,0.337281740000000,0.336254330000000,0.335522950000000,0.335133510000000,0.335145010000000,0.335626010000000,0.336606860000000,0.338097580000000,0.340065870000000,0.342458350000000,0.345202900000000,0.348255740000000,0.351564530000000,0.355089200000000,0.358806260000000,0.362639890000000,0.366533660000000,0.370424930000000,0.374266690000000,0.378023440000000,0.381682850000000,0.385258970000000,0.388785600000000,0.392304070000000,0.395857080000000,0.399467520000000,0.403153990000000,0.406935270000000,0.410822180000000,0.414813550000000,0.418904120000000,0.423103800000000,0.427432050000000,0.431890020000000,0.436459750000000,0.441117430000000,0.445852320000000,0.450657970000000,0.455543030000000,0.460518390000000,0.465578060000000,0.470716640000000,0.475931850000000,0.481216120000000,0.486559020000000,0.491957090000000,0.497416110000000,0.502953230000000,0.508578340000000,0.514311930000000,0.520162770000000,0.526129410000000,0.532214750000000,0.538443350000000,0.544841340000000,0.551424890000000,0.558209560000000,0.565210810000000,0.572443800000000,0.579928420000000,0.587681670000000,0.595701170000000,0.603976660000000,0.612494860000000,0.621243310000000,0.630227160000000,0.639458860000000,0.648955380000000,0.658721580000000,0.668747740000000,0.679020030000000,0.689527470000000,0.700247040000000,0.711169670000000,0.722271080000000,0.733542710000000,0.745018600000000,0.756747010000000,0.768766180000000};
	
	float aa=0.9683;
	float bb=0.0381;
	float c=1;
	float d=0;
	float T=0.02;
	float p1=0.04,p3=0.04;
	float q1=0.04,q2=0.04;
	float r1=0.001,r2=0.001;
	float s1=0,s2=0;
	float p2=0,p4=0;
	float sx=0,sy=0,cx=0,cy=0;   
	float k1=0,k2=0;
	
	
	ros::Rate rate(50);       // frequency is 50 Hz
	while(ros::ok())
	{
        /*
		if(timer>=0)
		{
			vx=200*d_x - 200*px + 14.8958*ux;
			vy=200*d_y - 200*py + 14.8958*uy;   
			vz=200*d_z - 200*pz + 10.3578*uz;    // LQR Control Signal
			yaw=0;
		}
		*/
		/*
		if(timer<=150)
		{
			d_x=0;
			d_y=0;
			d_z=1;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;     //Use velocities detected by dji
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=0;   
			vy=0;   
			vz=0.1;   
			yaw=0;
			
			if(vx>0.5)
			{
				vx=0.5;
			}
			if(vy>0.5)
			{
				vy=0.5;
			}
			if(vx<-0.5)
			{
				vx=-0.5;
			}
			if(vy<-0.5)
			{
				vy=-0.5;
			}
			
			a[i]=px;
			b[i]=py;
			i=i+1;
			if(i>0)
			{
				if(a[i]==a[i-1])
				{
					vx=0;
				}
				if(b[i]==b[i-1])
				{
					vy=0;
				}
			}  
			cout << "100";
		}
		*/
		
		if(timer>=0 && timer<=400)
		{
			d_x=-1.0;
			d_y=0;
			d_z=0.8;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;  // use the velocity detected by dji
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=0.8*(0.4472*d_x - 0.4472*px - 0.35*ux);   
			vy=0.65*(0.4472*d_y - 0.4472*py - 0.35*uy); 
			vz=(0.4472*d_z - 0.4472*pz - 0.0940*uz);  
			yaw=0;
			

			a[i]=px;
			b[i]=py;
			i=i+1;
			if(i>1)
			{
				if(a[i]==a[i-1])
				{
					vx=0;
				}
				if(b[i]==b[i-1])
				{
					vy=0;
				}
			} 
			
			cx=vx;
			cy=vy;
			sx=px;
			sy=py;
			cout << "101";
		}
		
		
		if(timer>=400)
		{
			deg=coun*1*3.141592653/360;
			d_x=-1.0;	
			d_y=-0.4*sin(deg);
			d_z=1.2-0.4*cos(deg);
			
			//d_x=a1[coun];
			//d_y=a2[coun];
			//d_z=1;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;              
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			
			// Kalman filter for the velocity in x direction
	/*		s1=aa*sx+bb*cx;   
			p2=aa*p1*aa+q1;
			k1=p2*c/(c*p2*c+r1);
			sx=s1+k1*(ux-c*s1);
			p1=(1-k1*c)*p2;
			
			
			// Kalman filter for the velocity in y direction
			s2=aa*sy+bb*cy;   
			p4=aa*p3*aa+q2;
			k2=p4*c/(c*p4*c+r2);
			sy=s2+k2*(uy-c*s2);
			p3=(1-k2*c)*p4;		*/
			
			vx=0.80*(0.4472*d_x - 0.4472*px - 0.35*sx);   
			vy=0.65*(0.4472*d_y - 0.4472*py - 0.35*sy); 
			vz=(0.4472*d_z - 0.4472*pz - 0.0940*uz);  
			yaw=0;
			coun=coun+1;
			sx=ux;
			sy=uy;
			cx=vx;
			cy=vy;
			
			cout << "111";
		}
		
	
	
	
	/*
		if(timer>=200 && timer<=350)
		{
			d_x=-1;
			d_y=0.5;
			d_z=1;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;             
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=0.8*(0.4472*d_x - 0.4472*px - 0.35*ux);   
			vy=0.8*(0.4472*d_y - 0.4472*py - 0.35*uy); 
			vz=(0.4472*d_z - 0.4472*pz - 0.0940*uz);
			yaw=0;
			
			
			cout << "111";
		}
		
		if(timer>=350 && timer<=500)
		{
			d_x=-1;
			d_y=-0.5;
			d_z=1;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;           
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=0.8*(0.4472*d_x - 0.4472*px - 0.35*ux);   
			vy=0.8*(0.4472*d_y - 0.4472*py - 0.35*uy); 
			vz=(0.4472*d_z - 0.4472*pz - 0.0940*uz);
			yaw=0;
			
			
			cout << "222";
		}
		
				
		if(timer>=500 && timer<=650)
		{
			d_x=0;
			d_y=-0.5;
			d_z=1;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;             
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=0.8*(0.4472*d_x - 0.4472*px - 0.35*ux);   
			vy=0.8*(0.4472*d_y - 0.4472*py - 0.35*uy); 
			vz=(0.4472*d_z - 0.4472*pz - 0.0940*uz);
			yaw=0;
			
			
			cout << "333";
		}
		
				
		if(timer>=650 && timer<=900)
		{
			d_x=0;
			d_y=0.5;
			d_z=1;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;              
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=0.8*(0.4472*d_x - 0.4472*px - 0.35*ux);   
			vy=0.8*(0.4472*d_y - 0.4472*py - 0.35*uy); 
			vz=(0.4472*d_z - 0.4472*pz - 0.0940*uz);
			yaw=0;
			
			
			cout << "444";
		}
		
		if(timer>=900)
		{
			d_x=-1;
			d_y=0.5;
			d_z=1;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;             
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=0.8*(0.4472*d_x - 0.4472*px - 0.35*ux);   
			vy=0.8*(0.4472*d_y - 0.4472*py - 0.35*uy); 
			vz=(0.4472*d_z - 0.4472*pz - 0.0940*uz);
			yaw=0;
			
			
			cout << "555";
		}
*/


		/*
		if(timer<=800 && timer>=500)
		{
			d_x=1;
			d_y=0;
			d_z=0;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;           
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=200*d_x - 200*px + 14.8958*ux;   
			vy=200*d_y - 200*py + 14.8958*uy; 
			vx=80*d_x - 80*px + 12.7*ux;  
			vy=80*d_y - 80*py + 12.7*uy;			
			vz=0;   
			yaw=0;
			
			if(vx>0.5)
			{
				vx=0.5;
			}
			if(vy>0.5)
			{
				vy=0.5;
			}
			if(vx<-0.5)
			{
				vx=-0.5;
			}
			if(vy<-0.5)
			{
				vy=-0.5;
			}
			
			//roll_past=cvmSet(att, 0, 0, roll);   
			
			cout << "111 ";
		}
		else if(timer<=1100 && timer>=800)
		{
			d_x=1;
			d_y=1;
			d_z=0;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;              
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=200*d_x - 200*px + 14.8958*ux;   
			vy=200*d_y - 200*py + 14.8958*uy;   
			vx=80*d_x - 80*px + 12.7*ux;   
			vy=80*d_y - 80*py + 12.7*uy;	
			vz=0;   
			yaw=0;
			if(vx>0.5)
			{
				vx=0.5;
			}
			if(vy>0.5)
			{
				vy=0.5;
			}
			if(vx<-0.5)
			{
				vx=-0.5;
			}
			if(vy<-0.5)
			{
				vy=-0.5;
			}
			cout << "222 ";
		}
		else if(timer<=1400  && timer>=1100)
		{
			d_x=0;
			d_y=1;
			d_z=0;
			px=pos.posx;   
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;              //调用dji测到的速度，guidance测到的不准
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=200*d_x - 200*px + 14.8958*ux;   //经过LQR控制之后得到的控制指令，这个不对就用PID
			vy=200*d_y - 200*py + 14.8958*uy;   
			vx=80*d_x - 80*px + 12.7*ux;   //经过LQR控制之后得到的控制指令，这个不对就用PID
			vy=80*d_y - 80*py + 12.7*uy;	
			vz=0;   
			yaw=0;
			if(vx>0.5)
			{
				vx=0.5;
			}
			if(vy>0.5)
			{
				vy=0.5;
			}
			if(vx<-0.5)
			{
				vx=-0.5;
			}
			if(vy<-0.5)
			{
				vy=-0.5;
			}
			cout << "333 ";
		}
		else if(timer<=1700 && timer>=1400)
		{
			d_x=0;
			d_y=0;
			d_z=0;
			px=pos.posx;  
			py=pos.posy;
		    pz=pos.posz;
			ux=drone->velocity.vx;              
			uy=drone->velocity.vy;
			uz=drone->velocity.vz;
			vx=200*d_x - 200*px + 14.8958*ux;   
			vy=200*d_y - 200*py + 14.8958*uy;   
			vx=80*d_x - 80*px + 12.7*ux;   
			vy=80*d_y - 80*py + 12.7*uy;	
			vz=0;   
			yaw=0;
			if(vx>0.5)
			{
				vx=0.5;
			}
			if(vy>0.5)
			{
				vy=0.5;
			}
			if(vx<-0.5)
			{
				vx=-0.5;
			}
			if(vy<-0.5)
			{
				vy=-0.5;
			}
			cout << "444 ";
		}
		*/
		
		/*
		else
		{
			timer=0;
			vx = 0;
			vy = 0;
			counter++;
			if(counter==3)
			{
				yaw=0.0;
				vz=0.;
				return 0;
			}
		}*/
		//float vx= drone->velocity.vx;
		
		/*
		float degree = timer/200.*3.1415;
		vx = cos(degree)*0.4;
		vy = sin(degree)*0.4;  
        */		
		//cout << vx <<"\t" << vy << "\t" << timer<< endl;
		
		
		
		
		/*20170603——wny sin path*/
		wny_count++;
		if(wny_count>400) //T= 8 seconds
		{
			wny_count=0;
		}
		wny_counter=wny_count;
		wny_vx=0.2;
		wny_vy=0.2*sin(2*3.14*wny_counter/400.0);
		printf("vx=%f\n",wny_vx);
		printf("vy=%f\n",wny_vy);
		/*20170603——wny sin path*/
		
		
		
		
		drone->attitude_control( 	Flight::HorizontalLogic::HORIZONTAL_VELOCITY |  
									// HORIZONTAL_ATTITUDE
									Flight::VerticalLogic::VERTICAL_VELOCITY |
									Flight::YawLogic::YAW_PALSTANCE |
									Flight::HorizontalCoordinate::HORIZONTAL_BODY |			
									Flight::SmoothMode::SMOOTH_ENABLE,
									vx, vy, vz, 0.0);         
									// Attitude control mode
                                    // The four control sigmals are 
									// (pitch,roll,vz,dyaw)
		
		init_log<< vx <<"\t"<< vy <<"\t"<< vz <<"\t"<<0.012<<"\t"
		        << cvmGet(att_right_now,0,0)<<"\t"<<cvmGet(att_right_now,1,0)
				<<"\t"<<cvmGet(att_right_now,2,0)<<"\t"<<velocity.vx<<"\t"
				<<velocity.vy<<"\t"<<velocity.vz<<"\t"<<acc.ax<<"\t"<<acc.ay
				<<"\t"<<acc.az<<"\t"<<pos.posx<<"\t"<<pos.posy<<"\t"<<pos.posz
				<<"\t"<<attitude_quaternion.wx<<"\t"<<attitude_quaternion.wy
				<<"\t"<<attitude_quaternion.wz<<"\t"<<d_x<<"\t"<<d_y<<"\t"<<d_z
				<<"\t"<<sx<<"\t"<<sy<<"\t"<<cx<<"\t"<<cy<<endl;
				
		ros::spinOnce();
		rate.sleep();
		timer++;
	}
	
	
	//	ifs1.close();
	//	ifs2.close();
	return 0;
}
